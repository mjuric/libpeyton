#!/bin/bash
#
# A configure stub for people used to that syntax
# Do ./configure --help for usage instructions
#

usage()
{
cat <<-EOF
	Configure and prepare the source code for building.

	Usage:
	   $0 [flags] [CMAKE_VAR1=VALUE [CMAKE_VAR2=VALUE2 [...]]]

	Available flags:
	   --prefix=<prefix>		# will install the code into <prefix>
	   --optimized			# configure the 'Release' build
	   --debug			# configure the 'Debug' build

	If ran from the top level source directory, it will configure the build
	directory in build/optimized/debug (depending on whether --optimized or
	--debug flags were present), as well as generate a simple Makefile to
	allowing the user to build the code directly from the top-level directory.

	Otherwise, it will configure the source in the current directory (assuming
	it's meant to be the build directory).
EOF
}

which cmake 2>&1 > /dev/null || { echo "CMake 2.8 or greater needed to build this code."; exit -1; }
CMAKE="cmake"

BUILDDIR='build'

TEMP=`getopt -o hp: -l help,prefix:,debug,optimized -- "$@"` || { echo "Try $0 --help"; exit $?; }

eval set -- "$TEMP"
while true ; do
	case "$1" in
		-p|--prefix)
			echo "=== configure: Setting install path to '$2'"
			CMAKE="$CMAKE -DCMAKE_INSTALL_PREFIX='$2'"
			shift 2 ;;
		--debug)
			echo "=== configure: Setting build type to 'Debug'"
			BUILDDIR='debug'
			CMAKE="$CMAKE -DCMAKE_BUILD_TYPE='Debug'"
			shift 1 ;;
		--optimized)
			echo "=== configure: Setting build type to 'Release'"
			BUILDDIR='optimized'
			CMAKE="$CMAKE -DCMAKE_BUILD_TYPE='Release'"
			shift 1 ;;
		-h|--help)
			usage;
			exit 0 ;;
		--) shift ; break ;;
		*) echo "Internal error!" ; exit 1 ;;
	esac
done

# Figure out the build dir -- if we're in the same directory as the
# configure script, make a subdirectory based on the choice of BUILD_TYPE
test -x ./configure && {
	mkdir -p "$BUILDDIR" && cd "$BUILDDIR" && SOURCEDIR=".." || {
		echo "Error creating build directory."; exit -1;
	}

	# A flag meaning we're configuring from in-source
	BDSET=1

	echo "=== configure: Build directory is '$BUILDDIR'"
} || {
	BUILDDIR="."
	SOURCEDIR=`dirname $0`
}

# Assume all extra arguments are CMAKE variable definitions
for arg do
	CMAKE="$CMAKE '-D$arg'"
done
CMAKE="$CMAKE $SOURCEDIR"

# Delete old CMakeCache.txt if it exists
test -f CMakeCache.txt && rm -f CMakeCache.txt

# Run cmake
echo "=== Invoking CMake to configure the source"
$CMAKE && {
	if [ "$BDSET" == "1" ]; then
		# Generate a stub makefile that will hand-off compilation to the real makefile
		# This happens only when configure is run in-source
		cat > ../Makefile <<EOT
all:

tidy:
	@ rm -rf $BUILDDIR

%:
	@ test -f $BUILDDIR/Makefile || { echo "$BUILDDIR directory not configured. Run configure first." && false; }
	@ cd $BUILDDIR && \$(MAKE) \$@
EOT
	fi;
	echo "=== configure: Source configured in directory '$BUILDDIR'. Run \`make' to compile."
}
